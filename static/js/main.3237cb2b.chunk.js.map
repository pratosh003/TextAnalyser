{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","backgroundColor","onChange","event","console","log","target","rows","newText","toUpperCase","toLowerCase","copyText","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","length","App","setMode","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3237cb2b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a> \r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  abText: PropTypes.string\r\n}\r\n\r\n","import React, { useState } from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState('Enter text here'); //state variable\r\n\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  }\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  }\r\n  const handleClearClick = () => {\r\n    let newText = \" \"\r\n    setText(newText);\r\n  }\r\n\r\n  const onChangeHandle = (event) => {\r\n    console.log(\"on change!!!\");\r\n    setText(event.target.value);\r\n  }\r\n\r\n  const handleCopy = (event)=>{\r\n    var copyText = document.getElementById(\"mybox\");\r\n\r\n    /* Select the text field */\r\n    copyText.select();\r\n    copyText.setSelectionRange(0, 99999); /* For mobile devices */\r\n  \r\n     /* Copy the text inside the text field */\r\n    navigator.clipboard.writeText(copyText.value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"mb-3\" style= {{color: props.mode==='white'?'#212529':'white'}}>\r\n          <h4 >{props.heading}</h4>\r\n          <textarea className=\"form-control\" id=\"mybox\" value={text} style={{backgroundColor: props.mode==='light'?'white':'#212529',\r\n          color: props.mode==='light'?'black':'white'}}\r\n          onChange={onChangeHandle} rows=\"15\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-dark mx-2\" onClick={handleUpClick}>Convert to uppercase</button>\r\n        <button className=\"btn btn-dark mx-2\" onClick={handleLoClick}>Convert to lowercase</button>\r\n        <button className=\"btn btn-success mx-2\" onClick={handleCopy}>Copy</button>\r\n        <button className=\"btn btn-danger mx-2\" onClick={handleClearClick}>Clear</button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color: props.mode==='light'?'#212529':'white'}}>\r\n        <h3 >Your Text Summary</h3>\r\n        <p>{text.split(\" \").length} words, {text.length} characters (including spaces) and {text.split(\".\").length-1} sentence(s)</p>\r\n        <p>{0.008*text.split(\" \").length} minutes read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import Navbar from './components/Navbar'\nimport './App.css';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = \"#000000\";\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n    }\n  }\n  return (\n    <>\n      <Navbar title=\"Text Analyser\" mode={mode} toggleMode={toggleMode} />\n      <div className=\"container my-3\">\n        <TextForm heading='Enter the text to analyse:' mode={mode} />\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}